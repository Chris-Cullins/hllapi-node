// Generated by CoffeeScript 1.7.1
(function() {
  var connectPresentationSpace, dataString, disconnectPresentationSpace, ffi, functionNum, hllapi, hllapiLib, hlldll, length, pos, posReturn, ref, sendKey;

  ffi = require('ffi');

  ref = require('ref');

  hlldll = ffi.DynamicLibrary("./hllapi32.dll");

  hllapi = hlldll.get('WinHLLAPI');

  functionNum = ref.refType('int');

  dataString = ref.refType('string');

  length = ref.refType('int');

  pos = ref.refType('int');

  posReturn = ref.refType('int');

  hllapiLib = ffi.Library('hllapi32', {
    'WinHLLAPI': [posReturn, [functionNum, dataString, length, pos]]
  });

  connectPresentationSpace = function(presentationSpace, callback) {
    var data_string, function_number, ps_position, ps_position_return;
    function_number = ref.alloc('int', 1);
    data_string = ref.alloc('CString', presentationSpace);
    length = ref.alloc('int', 4);
    ps_position = ref.alloc('int', 0);
    ps_position_return = ref.alloc('int');
    console.log(function_number.deref() + " ... " + data_string.deref() + " ... " + length.deref());
    console.log(hllapiLib.WinHLLAPI.async(function_number, data_string, length, ps_position, function(err, res) {
      console.log("returned!" + ps_position_return.deref());
      callback();
      if (err) {
        return console.error(err);
      }
    }));
  };

  disconnectPresentationSpace = function() {
    var data_string, function_number, ps_position, ps_position_return;
    function_number = ref.alloc('int', 2);
    data_string = ref.alloc('CString');
    length = ref.alloc('int', 4);
    ps_position = ref.alloc('int', 0);
    ps_position_return = ref.alloc('int');
    console.log(function_number.deref() + " ... " + data_string.deref() + " ... " + length.deref());
    ps_position_return = hllapiLib.WinHLLAPI.async(function_number, data_string, length, ps_position, function(err, res) {
      if (err) {
        return console.error(err);
      }
      console.log("returned!" + ps_position_return.deref());
    });
    return ps_position_return.deref();
  };

  sendKey = function(key) {
    var data_string, function_number, ps_position, ps_position_return;
    function_number = ref.alloc('int', 1);
    data_string = ref.alloc('CString', key);
    length = ref.alloc('int', key.length);
    ps_position = ref.alloc('int', 0);
    ps_position_return = ref.alloc('int');
    console.log(function_number.deref() + " ... " + data_string.deref() + " ... " + length.deref());
    ps_position_return = hllapiLib.WinHLLAPI(function_number, data_string, length, ps_position);
    return ps_position_return.deref();
  };

  connectPresentationSpace('A', sendKey('H'));

  sendKey('H');

  sendKey('I');

  disconnectPresentationSpace();

}).call(this);
